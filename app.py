from flask import Flask, request, jsonify
import openai
import os

app = Flask(__name__)

# üîê OpenAI API –∫–ª—é—á –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
openai.api_key = os.getenv("OPENAI_API_KEY")

# üß∞ –û–Ω–ª–∞–π–Ω-“õ“±—Ä–∞–ª–¥–∞—Ä —Ç—ñ–∑—ñ–º—ñ
TOOLS = {
    "Padlet": "https://padlet.com",
    "Mentimeter": "https://www.mentimeter.com",
    "Kahoot": "https://kahoot.com",
    "Wordwall": "https://wordwall.net",
    "Google Forms": "https://forms.google.com"
}

@app.route("/generate_reflection", methods=["POST"])
def generate_reflection():
    data = request.get_json()

    topic = data.get("topic", "")
    grade = data.get("grade", "")
    bloom = data.get("bloom", "")
    reflex_type = data.get("reflexType", "")
    components = data.get("components", [])

    clil_components = ", ".join(components)

    # üìÑ –ü—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    prompt = (
        f"–ú“±“ì–∞–ª—ñ–º —Ä–µ—Ç—ñ–Ω–¥–µ {grade}-—Å—ã–Ω—ã–ø“õ–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ —Å–∞–±–∞“ì—ã–Ω–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ä–µ—Ñ–ª–µ–∫—Å–∏—è —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω –¥–∞–π—ã–Ω–¥–∞. "
        f"–¢–∞“õ—ã—Ä—ã–ø: {topic}. CLIL –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—Ç–µ—Ä—ñ: {clil_components}. Bloom —Ç–∞–∫—Å–æ–Ω–æ–º–∏—è—Å—ã: {bloom}. "
        f"–†–µ—Ñ–ª–µ–∫—Å–∏—è ”ô–¥—ñ—Å—ñ: {reflex_type}. 5 –Ω–∞“õ—Ç—ã —Å“±—Ä–∞“õ –¥–∞–π—ã–Ω–¥–∞ –∂”ô–Ω–µ —Å–æ“£—ã–Ω–¥–∞ 3 –æ–Ω–ª–∞–π–Ω “õ“±—Ä–∞–ª–¥—ã “±—Å—ã–Ω (—Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä—ñ–º–µ–Ω)."
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )

        answer = response['choices'][0]['message']['content']

        # üß© HTML –±–ª–æ–∫ —Å –æ–Ω–ª–∞–π–Ω-“õ“±—Ä–∞–ª–¥–∞—Ä–º–µ–Ω
        tools_html = "<h4>üîß “∞—Å—ã–Ω—ã–ª–∞—Ç—ã–Ω —Ü–∏—Ñ—Ä–ª—ã“õ “õ“±—Ä–∞–ª–¥–∞—Ä:</h4><ul>"
        for name, url in TOOLS.items():
            tools_html += f'<li><a href="{url}" target="_blank">{name}</a></li>'
        tools_html += "</ul>"

        return jsonify({"questions": answer + tools_html})

    except Exception as e:
        return jsonify({"error": str(e)}), 500
